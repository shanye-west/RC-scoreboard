-- Create best_ball_player_scores table
create table best_ball_player_scores (
  id bigint generated by default as identity primary key,
  match_id bigint references matches(id),
  player_id bigint references players(id),
  hole_number integer,
  score integer,
  handicap_strokes integer default 0,
  net_score integer,
  updated_at timestamp with time zone default timezone('utc'::text, now()),
  unique(match_id, player_id, hole_number)
);

-- Create user_roles table
create table user_roles (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users(id),
  role text check (role in ('admin', 'user')),
  created_at timestamp with time zone default timezone('utc'::text, now()),
  unique(user_id)
);

-- Add RLS policies
alter table best_ball_player_scores enable row level security;
alter table user_roles enable row level security;

-- Policies for best_ball_player_scores
create policy "Users can view best ball scores"
  on best_ball_player_scores for select
  using (true);

create policy "Admins can insert best ball scores"
  on best_ball_player_scores for insert
  with check (
    exists (
      select 1 from user_roles
      where user_id = auth.uid()
      and role = 'admin'
    )
  );

create policy "Admins can update best ball scores"
  on best_ball_player_scores for update
  using (
    exists (
      select 1 from user_roles
      where user_id = auth.uid()
      and role = 'admin'
    )
  );

-- Policies for user_roles
create policy "Users can view their own role"
  on user_roles for select
  using (user_id = auth.uid());

create policy "Admins can manage roles"
  on user_roles for all
  using (
    exists (
      select 1 from user_roles
      where user_id = auth.uid()
      and role = 'admin'
    )
  ); 